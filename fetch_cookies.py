# fetch_cookies.py

import os
from playwright.sync_api import sync_playwright, TimeoutError as PlaywrightTimeoutError

def fetch_youtube_cookies_and_headers(cookies_path: str = "cookies.txt"):
    email = "crce.9939.ce@gmail.com"
    password = "crce.9939.ce@7769030868"
    if not email or not password:
        raise RuntimeError("EMAIL and PASSWORD environment variables must be set")

    with sync_playwright() as p:
        # Launch in headful mode so Google does not block us
        browser = p.chromium.launch(
            headless=False,
            args=[
                "--disable-blink-features=AutomationControlled",
                "--no-sandbox",
                "--disable-dev-shm-usage",
            ],
        )
        context = browser.new_context(
            user_agent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) "
                       "AppleWebKit/537.36 (KHTML, like Gecko) "
                       "Chrome/114.0.0.0 Safari/537.36"
        )
        page = context.new_page()

        # --- LOGIN FLOW ---
        page.goto("https://accounts.google.com/signin/v2/identifier")
        page.wait_for_selector('input[type="email"]', timeout=10000)
        page.fill('input[type="email"]', email)
        page.click('button:has-text("Next")')
        page.wait_for_load_state("networkidle", timeout=15000)

        page.wait_for_selector('input[type="password"]', timeout=15000)
        page.fill('input[type="password"]', password)
        page.click('button:has-text("Next")')
        try:
            page.wait_for_load_state("networkidle", timeout=30000)
        except PlaywrightTimeoutError:
            # Maybe 2FA or captchaâ€”proceed anyway
            pass

        # --- NAVIGATE TO YOUTUBE TO SET COOKIES ---
        page.goto("https://www.youtube.com")
        page.wait_for_load_state("networkidle", timeout=20000)

        # --- EXTRACT COOKIES IN NETSCAPE FORMAT ---
        cookies = context.cookies()
        lines = [
            "# Netscape HTTP Cookie File",
            "# This file is generated by Playwright automation",
            ""
        ]
        for c in cookies:
            domain = c["domain"]
            flag = "TRUE" if domain.startswith(".") else "FALSE"
            path = c["path"]
            secure = "TRUE" if c.get("secure") else "FALSE"
            expires = str(c.get("expires", 0))
            name = c["name"]
            value = c["value"]
            lines.append("\t".join([domain, flag, path, secure, expires, name, value]))

        with open(cookies_path, "w") as f:
            f.write("\n".join(lines))

        browser.close()
        return {"cookies_file": cookies_path}

if __name__ == "__main__":
    fetch_youtube_cookies_and_headers()
